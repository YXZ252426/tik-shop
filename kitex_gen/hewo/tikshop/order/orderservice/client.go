// Code generated by Kitex v0.11.3. DO NOT EDIT.

package orderservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	order "github.com/hewo/tik-shop/kitex_gen/hewo/tikshop/order"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SubmitOrder(ctx context.Context, request *order.SubmitOrderRequest, callOptions ...callopt.Option) (r *order.SubmitOrderResponse, err error)
	PayOrder(ctx context.Context, request *order.PayOrderRequest, callOptions ...callopt.Option) (r *order.PayOrderResponse, err error)
	CancelOrder(ctx context.Context, request *order.CancelOrderRequest, callOptions ...callopt.Option) (r *order.CancelOrderResponse, err error)
	GetOrders(ctx context.Context, request *order.GetOrdersRequest, callOptions ...callopt.Option) (r *order.GetOrdersResponse, err error)
	GetOrderById(ctx context.Context, request *order.GetOrderByIdRequest, callOptions ...callopt.Option) (r *order.GetOrderByIdResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kOrderServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kOrderServiceClient struct {
	*kClient
}

func (p *kOrderServiceClient) SubmitOrder(ctx context.Context, request *order.SubmitOrderRequest, callOptions ...callopt.Option) (r *order.SubmitOrderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitOrder(ctx, request)
}

func (p *kOrderServiceClient) PayOrder(ctx context.Context, request *order.PayOrderRequest, callOptions ...callopt.Option) (r *order.PayOrderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PayOrder(ctx, request)
}

func (p *kOrderServiceClient) CancelOrder(ctx context.Context, request *order.CancelOrderRequest, callOptions ...callopt.Option) (r *order.CancelOrderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelOrder(ctx, request)
}

func (p *kOrderServiceClient) GetOrders(ctx context.Context, request *order.GetOrdersRequest, callOptions ...callopt.Option) (r *order.GetOrdersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOrders(ctx, request)
}

func (p *kOrderServiceClient) GetOrderById(ctx context.Context, request *order.GetOrderByIdRequest, callOptions ...callopt.Option) (r *order.GetOrderByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOrderById(ctx, request)
}
