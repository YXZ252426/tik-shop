// Code generated by Kitex v0.11.3. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	order "github.com/hewo/tik-shop/kitex_gen/hewo/tikshop/order"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"submitOrder": kitex.NewMethodInfo(
		submitOrderHandler,
		newOrderServiceSubmitOrderArgs,
		newOrderServiceSubmitOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"payOrder": kitex.NewMethodInfo(
		payOrderHandler,
		newOrderServicePayOrderArgs,
		newOrderServicePayOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"cancelOrder": kitex.NewMethodInfo(
		cancelOrderHandler,
		newOrderServiceCancelOrderArgs,
		newOrderServiceCancelOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getOrders": kitex.NewMethodInfo(
		getOrdersHandler,
		newOrderServiceGetOrdersArgs,
		newOrderServiceGetOrdersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getOrderById": kitex.NewMethodInfo(
		getOrderByIdHandler,
		newOrderServiceGetOrderByIdArgs,
		newOrderServiceGetOrderByIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func submitOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceSubmitOrderArgs)
	realResult := result.(*order.OrderServiceSubmitOrderResult)
	success, err := handler.(order.OrderService).SubmitOrder(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *order.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newOrderServiceSubmitOrderArgs() interface{} {
	return order.NewOrderServiceSubmitOrderArgs()
}

func newOrderServiceSubmitOrderResult() interface{} {
	return order.NewOrderServiceSubmitOrderResult()
}

func payOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServicePayOrderArgs)
	realResult := result.(*order.OrderServicePayOrderResult)
	success, err := handler.(order.OrderService).PayOrder(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *order.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newOrderServicePayOrderArgs() interface{} {
	return order.NewOrderServicePayOrderArgs()
}

func newOrderServicePayOrderResult() interface{} {
	return order.NewOrderServicePayOrderResult()
}

func cancelOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCancelOrderArgs)
	realResult := result.(*order.OrderServiceCancelOrderResult)
	success, err := handler.(order.OrderService).CancelOrder(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *order.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newOrderServiceCancelOrderArgs() interface{} {
	return order.NewOrderServiceCancelOrderArgs()
}

func newOrderServiceCancelOrderResult() interface{} {
	return order.NewOrderServiceCancelOrderResult()
}

func getOrdersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrdersArgs)
	realResult := result.(*order.OrderServiceGetOrdersResult)
	success, err := handler.(order.OrderService).GetOrders(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *order.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newOrderServiceGetOrdersArgs() interface{} {
	return order.NewOrderServiceGetOrdersArgs()
}

func newOrderServiceGetOrdersResult() interface{} {
	return order.NewOrderServiceGetOrdersResult()
}

func getOrderByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrderByIdArgs)
	realResult := result.(*order.OrderServiceGetOrderByIdResult)
	success, err := handler.(order.OrderService).GetOrderById(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *order.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newOrderServiceGetOrderByIdArgs() interface{} {
	return order.NewOrderServiceGetOrderByIdArgs()
}

func newOrderServiceGetOrderByIdResult() interface{} {
	return order.NewOrderServiceGetOrderByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SubmitOrder(ctx context.Context, request *order.SubmitOrderRequest) (r *order.SubmitOrderResponse, err error) {
	var _args order.OrderServiceSubmitOrderArgs
	_args.Request = request
	var _result order.OrderServiceSubmitOrderResult
	if err = p.c.Call(ctx, "submitOrder", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PayOrder(ctx context.Context, request *order.PayOrderRequest) (r *order.PayOrderResponse, err error) {
	var _args order.OrderServicePayOrderArgs
	_args.Request = request
	var _result order.OrderServicePayOrderResult
	if err = p.c.Call(ctx, "payOrder", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelOrder(ctx context.Context, request *order.CancelOrderRequest) (r *order.CancelOrderResponse, err error) {
	var _args order.OrderServiceCancelOrderArgs
	_args.Request = request
	var _result order.OrderServiceCancelOrderResult
	if err = p.c.Call(ctx, "cancelOrder", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrders(ctx context.Context, request *order.GetOrdersRequest) (r *order.GetOrdersResponse, err error) {
	var _args order.OrderServiceGetOrdersArgs
	_args.Request = request
	var _result order.OrderServiceGetOrdersResult
	if err = p.c.Call(ctx, "getOrders", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderById(ctx context.Context, request *order.GetOrderByIdRequest) (r *order.GetOrderByIdResponse, err error) {
	var _args order.OrderServiceGetOrderByIdArgs
	_args.Request = request
	var _result order.OrderServiceGetOrderByIdResult
	if err = p.c.Call(ctx, "getOrderById", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}
