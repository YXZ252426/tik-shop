// Code generated by Kitex v0.11.3. DO NOT EDIT.

package cartservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	cart "github.com/hewo/tik-shop/kitex_gen/hewo/tikshop/cart"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"getCart": kitex.NewMethodInfo(
		getCartHandler,
		newCartServiceGetCartArgs,
		newCartServiceGetCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"addToCart": kitex.NewMethodInfo(
		addToCartHandler,
		newCartServiceAddToCartArgs,
		newCartServiceAddToCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateCart": kitex.NewMethodInfo(
		updateCartHandler,
		newCartServiceUpdateCartArgs,
		newCartServiceUpdateCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"removeFromCart": kitex.NewMethodInfo(
		removeFromCartHandler,
		newCartServiceRemoveFromCartArgs,
		newCartServiceRemoveFromCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"clearCart": kitex.NewMethodInfo(
		clearCartHandler,
		newCartServiceClearCartArgs,
		newCartServiceClearCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	cartServiceServiceInfo                = NewServiceInfo()
	cartServiceServiceInfoForClient       = NewServiceInfoForClient()
	cartServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return cartServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return cartServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return cartServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CartService"
	handlerType := (*cart.CartService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "cart",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceGetCartArgs)
	realResult := result.(*cart.CartServiceGetCartResult)
	success, err := handler.(cart.CartService).GetCart(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *cart.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newCartServiceGetCartArgs() interface{} {
	return cart.NewCartServiceGetCartArgs()
}

func newCartServiceGetCartResult() interface{} {
	return cart.NewCartServiceGetCartResult()
}

func addToCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceAddToCartArgs)
	realResult := result.(*cart.CartServiceAddToCartResult)
	success, err := handler.(cart.CartService).AddToCart(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *cart.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newCartServiceAddToCartArgs() interface{} {
	return cart.NewCartServiceAddToCartArgs()
}

func newCartServiceAddToCartResult() interface{} {
	return cart.NewCartServiceAddToCartResult()
}

func updateCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceUpdateCartArgs)
	realResult := result.(*cart.CartServiceUpdateCartResult)
	success, err := handler.(cart.CartService).UpdateCart(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *cart.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newCartServiceUpdateCartArgs() interface{} {
	return cart.NewCartServiceUpdateCartArgs()
}

func newCartServiceUpdateCartResult() interface{} {
	return cart.NewCartServiceUpdateCartResult()
}

func removeFromCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceRemoveFromCartArgs)
	realResult := result.(*cart.CartServiceRemoveFromCartResult)
	success, err := handler.(cart.CartService).RemoveFromCart(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *cart.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newCartServiceRemoveFromCartArgs() interface{} {
	return cart.NewCartServiceRemoveFromCartArgs()
}

func newCartServiceRemoveFromCartResult() interface{} {
	return cart.NewCartServiceRemoveFromCartResult()
}

func clearCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceClearCartArgs)
	realResult := result.(*cart.CartServiceClearCartResult)
	success, err := handler.(cart.CartService).ClearCart(ctx, realArg.Request)
	if err != nil {
		switch v := err.(type) {
		case *cart.ErrorResponse:
			realResult.Error = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newCartServiceClearCartArgs() interface{} {
	return cart.NewCartServiceClearCartArgs()
}

func newCartServiceClearCartResult() interface{} {
	return cart.NewCartServiceClearCartResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCart(ctx context.Context, request *cart.GetCartRequest) (r *cart.GetCartResponse, err error) {
	var _args cart.CartServiceGetCartArgs
	_args.Request = request
	var _result cart.CartServiceGetCartResult
	if err = p.c.Call(ctx, "getCart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddToCart(ctx context.Context, request *cart.AddToCartRequest) (r *cart.AddToCartResponse, err error) {
	var _args cart.CartServiceAddToCartArgs
	_args.Request = request
	var _result cart.CartServiceAddToCartResult
	if err = p.c.Call(ctx, "addToCart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCart(ctx context.Context, request *cart.UpdateCartRequest) (r *cart.UpdateCartResponse, err error) {
	var _args cart.CartServiceUpdateCartArgs
	_args.Request = request
	var _result cart.CartServiceUpdateCartResult
	if err = p.c.Call(ctx, "updateCart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveFromCart(ctx context.Context, request *cart.RemoveFromCartRequest) (r *cart.RemoveFromCartResponse, err error) {
	var _args cart.CartServiceRemoveFromCartArgs
	_args.Request = request
	var _result cart.CartServiceRemoveFromCartResult
	if err = p.c.Call(ctx, "removeFromCart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClearCart(ctx context.Context, request *cart.ClearCartRequest) (r *cart.ClearCartResponse, err error) {
	var _args cart.CartServiceClearCartArgs
	_args.Request = request
	var _result cart.CartServiceClearCartResult
	if err = p.c.Call(ctx, "clearCart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Error != nil:
		return r, _result.Error
	}
	return _result.GetSuccess(), nil
}
