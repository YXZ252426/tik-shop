// Code generated by Kitex v0.11.3. DO NOT EDIT.

package productservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	product "github.com/hewo/tik-shop/kitex_gen/hewo/tikshop/product"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetProducts(ctx context.Context, request *product.GetProductsRequest, callOptions ...callopt.Option) (r *product.GetProductsReqsponse, err error)
	GetProductById(ctx context.Context, request *product.GetProductByIdRequest, callOptions ...callopt.Option) (r *product.GetProductByIdResponse, err error)
	CreateProduct(ctx context.Context, request *product.CreateProductRequest, callOptions ...callopt.Option) (r *product.CreateProductResponse, err error)
	UpdateProduct(ctx context.Context, request *product.UpdateProductRequest, callOptions ...callopt.Option) (r *product.UpdateProductResponse, err error)
	DeleteProduct(ctx context.Context, request *product.DeleteProductRequest, callOptions ...callopt.Option) (r *product.DeleteProductResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kProductServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProductServiceClient struct {
	*kClient
}

func (p *kProductServiceClient) GetProducts(ctx context.Context, request *product.GetProductsRequest, callOptions ...callopt.Option) (r *product.GetProductsReqsponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProducts(ctx, request)
}

func (p *kProductServiceClient) GetProductById(ctx context.Context, request *product.GetProductByIdRequest, callOptions ...callopt.Option) (r *product.GetProductByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProductById(ctx, request)
}

func (p *kProductServiceClient) CreateProduct(ctx context.Context, request *product.CreateProductRequest, callOptions ...callopt.Option) (r *product.CreateProductResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateProduct(ctx, request)
}

func (p *kProductServiceClient) UpdateProduct(ctx context.Context, request *product.UpdateProductRequest, callOptions ...callopt.Option) (r *product.UpdateProductResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProduct(ctx, request)
}

func (p *kProductServiceClient) DeleteProduct(ctx context.Context, request *product.DeleteProductRequest, callOptions ...callopt.Option) (r *product.DeleteProductResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteProduct(ctx, request)
}
